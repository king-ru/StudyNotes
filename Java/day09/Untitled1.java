/*
finally代码块：定义一定执行的代码；
常用于数据库的操作；常用于关闭资源。
有catch才代表问题被解决。
//问题在函数内部被解决（即出现catch），外面就不用声明抛出该问题。
//没有被解决必须在函数外部声明。
*/


//记住一点，catch是用于处理异常，如果没有catch就代表异常没有被处理过。如果该异常是检测时异常，那么必须声明。
/*
格式：
1.
try//(或者对应多个catch也可以)
{
}
catch()
{
}
2.
try
{
}
catch()
{
}
finally
{
}
3.
try
{
}
finally
{
}
*/

/*
异常在父类覆盖中的体现：
1.子类在覆盖父类时，如果父类的方法抛出异常，那么子类的覆盖方法，只能抛出父类的异常或者该异常的子类。
	如果子类会出现新的异常，则只能在内部处理掉（用try函数），不能抛出。
2.如果父类方法抛出多个异常，那么子类在覆盖该方法时，只能抛出父类异常的子集。
3.如果父类或者接口的方法中没有异常抛出，那么子类在覆盖方法时，也不可以抛出异常。
	如果子类方法发生了异常，就必须进行try处理，绝对不能抛出。
*/

/*
总得来说对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；
如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。引用变量所指向的对象中的内容还是可以改变的。
引用类型变量：引用类型变量是以间接方式去获取数据。
引用类型变量都属于对象类型，如：数组、类、字符串等都属于引用类型变量。
所以，引用类型变量里面存放的是数据的地址。
*/