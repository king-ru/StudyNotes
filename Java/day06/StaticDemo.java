/*
静态：static
用法：是一个修饰符，用于修饰成员（成员变量，成员函数）；被对象所共享。
           当成员被静态修饰后，就多了一个调用方式，除了可以被对象调用外，
           还可以直接被类名调用，写法：类名.静态成员.
static:特点：（成员在方法区。共享区。数据区。。）
    1.随着类的加载而加载。

    2.优先于对象存在。 //静态先存在，对象后存在。

	3.被所有对象所共享。
	4.可以直接被类名所调用。
	
	实例变量（非静态变量）和类变量（静态变量）的区别：
	1.存放位置：类变量随着类的加载而存在于方法区中。
					   实例变量随着对象的建立而存在于堆内存中。
					2.生命周期：类变量生命周期最长，随着类的消失而消失；	实例变量生命周期随着对象的消失而消失； 
	
	静态的使用注意事项：
	1.静态方法只能访问静态成员。非静态方法既可以访问静态，也可以访问非静态。
	2.静态方法中不可以定义this，super关键字。因为静态优先于对象存在。
	*/
class Person
{
	String name;//（称为成员变量，实例变量）只有创建了对象，这个变量才存在，不是一开始就开辟了存储空间的。
	static String country="CN";//（静态的成员变量，也称为类变量）
	public static void show()
	{
		System.out.println(": :"+country);
	}
}
class StaticDemo 
{
	public static void main(String[] args) 
	{
		//Person p=new Person();
		//p.name="chenru";
		//p.show();
        //System.out.println(p.country);//如果没有static也可以直接写吗？
		//System.out.println(Person.country);
		Person.show();
	}
}
/*
静态有利有弊：
利：对对象的共享数据进行单独空间的存储，节省空间，没必要每个对象都单独存一份。
       可以直接被类名所调用。
弊端：生命周期过长；
访问出现局限性；（静态只能访问静态）
*/






















